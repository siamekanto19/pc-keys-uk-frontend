/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation CreateOrder($data: OrderInput!) {\n    createOrder(data: $data) {\n      data {\n        id\n        attributes {\n          payment_intent\n          payment_method\n          total_price\n          user {\n            data {\n              id\n              attributes {\n                email\n                username\n              }\n            }\n          }\n          email\n          first_name\n          last_name\n          customer_type\n          order_details\n          shipping_info\n          status\n          transaction_id\n        }\n      }\n    }\n  }\n": types.CreateOrderDocument,
    "\n  query Products {\n    products {\n      data {\n        id\n        attributes {\n          slug\n        }\n      }\n    }\n  }\n": types.ProductsDocument,
    "\n  query FindProduct($modelName: String, $slug: String, $publicationState: String) {\n    findSlug(modelName: $modelName, slug: $slug, publicationState: $publicationState) {\n      ... on ProductEntityResponse {\n        data {\n          id\n          attributes {\n            name\n            slug\n            sku\n            in_stock\n            featured_image {\n              data {\n                id\n                attributes {\n                  name\n                  alternativeText\n                  caption\n                  width\n                  height\n                  formats\n                  hash\n                  ext\n                  mime\n                  size\n                  url\n                  previewUrl\n                  provider\n                  provider_metadata\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n            long_description\n            seo {\n              id\n              metaTitle\n              metaDescription\n              metaImage {\n                data {\n                  id\n                  attributes {\n                    name\n                    alternativeText\n                    caption\n                    width\n                    height\n                    formats\n                    hash\n                    ext\n                    mime\n                    size\n                    url\n                    previewUrl\n                    provider\n                    provider_metadata\n                    createdAt\n                    updatedAt\n                  }\n                }\n              }\n              metaSocial {\n                id\n                socialNetwork\n                title\n                description\n                image {\n                  data {\n                    id\n                    attributes {\n                      name\n                      alternativeText\n                      caption\n                      width\n                      height\n                      formats\n                      hash\n                      ext\n                      mime\n                      size\n                      url\n                      previewUrl\n                      provider\n                      provider_metadata\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                }\n              }\n              keywords\n              metaRobots\n              structuredData\n              metaViewport\n              canonicalURL\n            }\n            product_variants(pagination: { pageSize: 100 }) {\n              data {\n                id\n                attributes {\n                  slug\n                  sku\n                  price\n                  name\n                  in_stock\n                  current_price\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.FindProductDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOrder($data: OrderInput!) {\n    createOrder(data: $data) {\n      data {\n        id\n        attributes {\n          payment_intent\n          payment_method\n          total_price\n          user {\n            data {\n              id\n              attributes {\n                email\n                username\n              }\n            }\n          }\n          email\n          first_name\n          last_name\n          customer_type\n          order_details\n          shipping_info\n          status\n          transaction_id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOrder($data: OrderInput!) {\n    createOrder(data: $data) {\n      data {\n        id\n        attributes {\n          payment_intent\n          payment_method\n          total_price\n          user {\n            data {\n              id\n              attributes {\n                email\n                username\n              }\n            }\n          }\n          email\n          first_name\n          last_name\n          customer_type\n          order_details\n          shipping_info\n          status\n          transaction_id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Products {\n    products {\n      data {\n        id\n        attributes {\n          slug\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Products {\n    products {\n      data {\n        id\n        attributes {\n          slug\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FindProduct($modelName: String, $slug: String, $publicationState: String) {\n    findSlug(modelName: $modelName, slug: $slug, publicationState: $publicationState) {\n      ... on ProductEntityResponse {\n        data {\n          id\n          attributes {\n            name\n            slug\n            sku\n            in_stock\n            featured_image {\n              data {\n                id\n                attributes {\n                  name\n                  alternativeText\n                  caption\n                  width\n                  height\n                  formats\n                  hash\n                  ext\n                  mime\n                  size\n                  url\n                  previewUrl\n                  provider\n                  provider_metadata\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n            long_description\n            seo {\n              id\n              metaTitle\n              metaDescription\n              metaImage {\n                data {\n                  id\n                  attributes {\n                    name\n                    alternativeText\n                    caption\n                    width\n                    height\n                    formats\n                    hash\n                    ext\n                    mime\n                    size\n                    url\n                    previewUrl\n                    provider\n                    provider_metadata\n                    createdAt\n                    updatedAt\n                  }\n                }\n              }\n              metaSocial {\n                id\n                socialNetwork\n                title\n                description\n                image {\n                  data {\n                    id\n                    attributes {\n                      name\n                      alternativeText\n                      caption\n                      width\n                      height\n                      formats\n                      hash\n                      ext\n                      mime\n                      size\n                      url\n                      previewUrl\n                      provider\n                      provider_metadata\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                }\n              }\n              keywords\n              metaRobots\n              structuredData\n              metaViewport\n              canonicalURL\n            }\n            product_variants(pagination: { pageSize: 100 }) {\n              data {\n                id\n                attributes {\n                  slug\n                  sku\n                  price\n                  name\n                  in_stock\n                  current_price\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindProduct($modelName: String, $slug: String, $publicationState: String) {\n    findSlug(modelName: $modelName, slug: $slug, publicationState: $publicationState) {\n      ... on ProductEntityResponse {\n        data {\n          id\n          attributes {\n            name\n            slug\n            sku\n            in_stock\n            featured_image {\n              data {\n                id\n                attributes {\n                  name\n                  alternativeText\n                  caption\n                  width\n                  height\n                  formats\n                  hash\n                  ext\n                  mime\n                  size\n                  url\n                  previewUrl\n                  provider\n                  provider_metadata\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n            long_description\n            seo {\n              id\n              metaTitle\n              metaDescription\n              metaImage {\n                data {\n                  id\n                  attributes {\n                    name\n                    alternativeText\n                    caption\n                    width\n                    height\n                    formats\n                    hash\n                    ext\n                    mime\n                    size\n                    url\n                    previewUrl\n                    provider\n                    provider_metadata\n                    createdAt\n                    updatedAt\n                  }\n                }\n              }\n              metaSocial {\n                id\n                socialNetwork\n                title\n                description\n                image {\n                  data {\n                    id\n                    attributes {\n                      name\n                      alternativeText\n                      caption\n                      width\n                      height\n                      formats\n                      hash\n                      ext\n                      mime\n                      size\n                      url\n                      previewUrl\n                      provider\n                      provider_metadata\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                }\n              }\n              keywords\n              metaRobots\n              structuredData\n              metaViewport\n              canonicalURL\n            }\n            product_variants(pagination: { pageSize: 100 }) {\n              data {\n                id\n                attributes {\n                  slug\n                  sku\n                  price\n                  name\n                  in_stock\n                  current_price\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;